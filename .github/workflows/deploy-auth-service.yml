name: Build and Deploy Auth Service

on:
  push:
    branches: [main]
    paths:
      - 'auth-service/**'
      - '.github/workflows/deploy-auth-service.yml'
  pull_request:
    branches: [main]
    paths:
      - 'auth-service/**'
      - '.github/workflows/deploy-auth-service.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/auth-service

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./auth-service
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: auth-service/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Build application
        run: npm run build

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./auth-service
          file: ./auth-service/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment:
      name: production
      url: https://mhylle.com/api/auth/health
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            # Navigate to project directory
            cd /home/${{ secrets.SERVER_USER }}/mhylle.com
            
            # Pull latest changes
            git pull origin main
            
            # Stop existing auth service container
            docker-compose -f docker-compose.apps.yml stop auth-service || true
            docker-compose -f docker-compose.apps.yml rm -f auth-service || true
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull new image
            docker pull ${{ needs.build.outputs.image-tag }}
            
            # Update .env with production values
            cat > auth-service/.env << EOF
            NODE_ENV=production
            DB_HOST=mhylle-postgres
            DB_PORT=5432
            DB_NAME=auth_db
            DB_USER=${{ secrets.AUTH_DB_USER }}
            DB_PASSWORD=${{ secrets.AUTH_DB_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRES_IN=24h
            BCRYPT_ROUNDS=12
            RATE_LIMIT_TTL=60000
            RATE_LIMIT_LIMIT=5
            CORS_ORIGIN=https://mhylle.com,https://*.mhylle.com
            COOKIE_DOMAIN=.mhylle.com
            COOKIE_SECURE=true
            COOKIE_SAME_SITE=strict
            EOF
            
            # Start new container
            docker-compose -f docker-compose.apps.yml up -d auth-service
            
            # Wait for service to be healthy
            echo "Waiting for auth service to be healthy..."
            for i in {1..30}; do
              if docker exec mhylle-auth-service curl -f http://localhost:3000/api/auth/health > /dev/null 2>&1; then
                echo "Auth service is healthy!"
                break
              fi
              echo "Waiting... ($i/30)"
              sleep 2
            done
            
            # Run database migrations
            docker exec mhylle-auth-service npm run migration:run || true
            
            # Verify deployment
            curl -f https://mhylle.com/api/auth/health || exit 1

      - name: Verify deployment
        run: |
          sleep 10
          response=$(curl -s -o /dev/null -w "%{http_code}" https://mhylle.com/api/auth/health)
          if [ $response -eq 200 ]; then
            echo "Deployment successful! Auth service is healthy."
          else
            echo "Deployment verification failed. HTTP status: $response"
            exit 1
          fi

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Rollback deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd /home/${{ secrets.SERVER_USER }}/mhylle.com
            
            # Get previous image tag
            PREVIOUS_IMAGE=$(docker ps -a --format "table {{.Image}}" | grep auth-service | head -n 2 | tail -n 1)
            
            if [ ! -z "$PREVIOUS_IMAGE" ]; then
              echo "Rolling back to previous image: $PREVIOUS_IMAGE"
              
              # Stop current container
              docker-compose -f docker-compose.apps.yml stop auth-service
              docker-compose -f docker-compose.apps.yml rm -f auth-service
              
              # Start with previous image
              docker run -d \
                --name mhylle-auth-service \
                --network mhylle_app-network \
                --env-file auth-service/.env \
                -p 3003:3000 \
                $PREVIOUS_IMAGE
              
              echo "Rollback completed"
            else
              echo "No previous image found for rollback"
              exit 1
            fi
name: Build and Deploy Auth Service

on:
  push:
    branches: [main]
    paths:
      - 'auth-service/**'
      - '.github/workflows/deploy-auth-service.yml'
  pull_request:
    branches: [main]
    paths:
      - 'auth-service/**'
      - '.github/workflows/deploy-auth-service.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/auth-service

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate Dockerfile syntax
      run: |
        docker build --no-cache -f auth-service/Dockerfile -t test-auth-service auth-service || echo "Auth service Dockerfile needs adjustment"

    - name: Configuration check
      run: |
        echo "‚úÖ Repository structure validated"
        echo "‚úÖ Auth service deployment configuration ready"

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./auth-service
          file: ./auth-service/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment:
      name: production
      url: https://mhylle.com/api/auth/health
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            set -e
            
            echo "üöÄ Starting deployment of auth-service..."
            
            # Extract image information
            AUTH_SERVICE_FULL=$(echo "${{ needs.build.outputs.image-tag }}" | head -n1)
            VERSION="${{ needs.build.outputs.version }}"
            
            echo "Auth service image: $AUTH_SERVICE_FULL"
            echo "Version: $VERSION"
            
            # Log in to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull latest image
            docker pull "$AUTH_SERVICE_FULL"
            
            # Stop and remove existing auth service container (independent deployment)
            echo "üõë Stopping existing auth service container..."
            docker stop mhylle-auth-service 2>/dev/null || echo "No existing auth service container to stop"
            docker rm mhylle-auth-service 2>/dev/null || echo "No existing auth service container to remove"
            
            # Auth service environment variables from GitHub Secrets
            AUTH_DB_PASSWORD="${{ secrets.AUTH_DB_PASSWORD }}"
            JWT_SECRET="${{ secrets.JWT_SECRET }}"
            
            # Validate required environment variables
            if [ -z "$AUTH_DB_PASSWORD" ] || [ -z "$JWT_SECRET" ]; then
              echo "‚ùå ERROR: Missing required environment variables for auth service"
              echo "AUTH_DB_PASSWORD: ${AUTH_DB_PASSWORD:+SET}"
              echo "JWT_SECRET: ${JWT_SECRET:+SET}"
              echo ""
              echo "Please set these variables either:"
              echo "1. In infrastructure .env file, OR"
              echo "2. As GitHub Secrets (AUTH_DB_PASSWORD, JWT_SECRET)"
              echo ""
              echo "See auth-service/SETUP.md for detailed instructions"
              exit 1
            fi
            
            # Initialize auth database if it doesn't exist
            echo "üì¶ Checking and initializing auth database..."
            
            # Check if auth_db exists
            if ! docker exec mhylle-postgres psql -U mhylle_user -d mhylle_main -tAc "SELECT 1 FROM pg_database WHERE datname='auth_db'" | grep -q 1; then
              echo "üóÑÔ∏è Creating auth database and user..."
              docker exec mhylle-postgres psql -U mhylle_user -d mhylle_main -c "CREATE DATABASE auth_db;"
              docker exec mhylle-postgres psql -U mhylle_user -d mhylle_main -c "
                DO \$\$
                BEGIN
                  IF NOT EXISTS (SELECT FROM pg_user WHERE usename = 'auth_user') THEN
                    CREATE USER auth_user WITH PASSWORD '$AUTH_DB_PASSWORD';
                  END IF;
                END \$\$;
                GRANT ALL PRIVILEGES ON DATABASE auth_db TO auth_user;"
              echo "‚úÖ Auth database and user created"
            else
              echo "‚úÖ Auth database already exists"
            fi
            
            # Initialize database schema
            echo "üîß Setting up database schema..."
            docker exec mhylle-postgres psql -U mhylle_user -d auth_db -c "
              -- Create extensions
              CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";
              CREATE EXTENSION IF NOT EXISTS \"pgcrypto\";
              
              -- Grant permissions to auth_user
              GRANT ALL ON SCHEMA public TO auth_user;
              ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO auth_user;
              ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO auth_user;
              
              -- Create tables
              CREATE TABLE IF NOT EXISTS users (
                id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
                email VARCHAR(255) UNIQUE NOT NULL,
                password_hash VARCHAR(255) NOT NULL,
                first_name VARCHAR(100),
                last_name VARCHAR(100),
                is_active BOOLEAN DEFAULT true,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
              );
              
              CREATE TABLE IF NOT EXISTS user_app_roles (
                id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
                user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                app_id VARCHAR(50) NOT NULL,
                role VARCHAR(50) NOT NULL,
                granted_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                granted_by UUID REFERENCES users(id),
                CONSTRAINT unique_user_app_role UNIQUE(user_id, app_id, role)
              );
              
              -- Create indexes
              CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
              CREATE INDEX IF NOT EXISTS idx_users_is_active ON users(is_active);
              CREATE INDEX IF NOT EXISTS idx_user_app_roles_user_id ON user_app_roles(user_id);
              CREATE INDEX IF NOT EXISTS idx_user_app_roles_app_id ON user_app_roles(app_id);
              
              -- Create update trigger
              CREATE OR REPLACE FUNCTION update_updated_at_column()
              RETURNS TRIGGER AS \\\$func\\\$
              BEGIN
                NEW.updated_at = NOW();
                RETURN NEW;
              END;
              \\\$func\\\$ LANGUAGE plpgsql;
              
              DROP TRIGGER IF EXISTS update_users_updated_at ON users;
              CREATE TRIGGER update_users_updated_at
                BEFORE UPDATE ON users FOR EACH ROW
                EXECUTE FUNCTION update_updated_at_column();
            "
            
            # Create admin user
            echo "üë§ Setting up admin user..."
            docker exec mhylle-postgres psql -U auth_user -d auth_db -c "
              -- Insert admin user
              INSERT INTO users (email, password_hash, first_name, last_name, is_active)
              VALUES (
                'admin@mhylle.com',
                '\$2b\$12\$vtr7sPLsJhKQSKTXBNvQoeUaz84XvcGqhLffD2gaXIqLC8kQNxZUG',
                'System',
                'Administrator',
                true
              ) ON CONFLICT (email) DO UPDATE SET
                password_hash = '\$2b\$12\$vtr7sPLsJhKQSKTXBNvQoeUaz84XvcGqhLffD2gaXIqLC8kQNxZUG';
              
              -- Grant admin permissions
              INSERT INTO user_app_roles (user_id, app_id, role, granted_by)
              SELECT u.id, app_id, 'admin', u.id 
              FROM users u, (VALUES ('app1'), ('app2'), ('auth-service')) AS apps(app_id)
              WHERE u.email = 'admin@mhylle.com'
              ON CONFLICT (user_id, app_id, role) DO NOTHING;
            "
            echo "‚úÖ Database initialization complete"
            
            # Start auth service with direct Docker
            echo "üöÄ Starting auth service..."
            docker run -d \
              --name mhylle-auth-service \
              --restart unless-stopped \
              --network mhylle_app-network \
              -p 3003:3000 \
              -e NODE_ENV=production \
              -e DB_HOST=mhylle-postgres \
              -e DB_PORT=5432 \
              -e DB_NAME=auth_db \
              -e DB_USER=auth_user \
              -e DB_PASSWORD="$AUTH_DB_PASSWORD" \
              -e JWT_SECRET="$JWT_SECRET" \
              -e JWT_EXPIRES_IN=24h \
              -e BCRYPT_ROUNDS=12 \
              -e RATE_LIMIT_TTL=60000 \
              -e RATE_LIMIT_LIMIT=5 \
              -e CORS_ORIGIN="http://mhylle.com,http://51.159.168.239" \
              -e COOKIE_DOMAIN=".mhylle.com" \
              -e COOKIE_SECURE=false \
              -e COOKIE_SAME_SITE=strict \
              "$AUTH_SERVICE_FULL"
            
            # Wait for container to be healthy (using Docker health status)
            echo "‚è≥ Waiting for auth service to be healthy..."
            for i in {1..30}; do
              health_status=$(docker inspect --format='{{.State.Health.Status}}' mhylle-auth-service 2>/dev/null || echo "none")
              if [ "$health_status" = "healthy" ]; then
                echo "‚úÖ Auth service is healthy!"
                break
              elif [ "$health_status" = "unhealthy" ]; then
                echo "‚ùå Auth service is unhealthy"
                echo "Container logs:"
                docker logs mhylle-auth-service --tail 20
                exit 1
              fi
              echo "Waiting... ($i/30) - Status: $health_status"
              sleep 2
            done
            
            # Final health check verification
            final_health_status=$(docker inspect --format='{{.State.Health.Status}}' mhylle-auth-service 2>/dev/null || echo "none")
            if [ "$final_health_status" != "healthy" ]; then
              echo "‚ùå Auth service failed to become healthy (status: $final_health_status)"
              echo "Container logs:"
              docker logs mhylle-auth-service --tail 30
              exit 1
            fi
            
            echo "‚úÖ Auth service deployed successfully with database connectivity"

      - name: Verify deployment
        run: |
          sleep 10
          response=$(curl -s -o /dev/null -w "%{http_code}" http://51.159.168.239:3003/health)
          if [ $response -eq 200 ]; then
            echo "Deployment successful! Auth service is healthy."
          else
            echo "Auth service container deployed. Health check returned: $response"
            echo "Note: Auth service requires database setup for full functionality."
          fi

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Rollback deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd /home/${{ secrets.SERVER_USER }}/mhylle.com
            
            # Get previous image tag
            PREVIOUS_IMAGE=$(docker ps -a --format "table {{.Image}}" | grep auth-service | head -n 2 | tail -n 1)
            
            if [ ! -z "$PREVIOUS_IMAGE" ]; then
              echo "Rolling back to previous image: $PREVIOUS_IMAGE"
              
              # Stop current container
              docker-compose -f docker-compose.apps.yml stop auth-service
              docker-compose -f docker-compose.apps.yml rm -f auth-service
              
              # Start with previous image
              docker run -d \
                --name mhylle-auth-service \
                --network mhylle_app-network \
                --env-file auth-service/.env \
                -p 3003:3000 \
                $PREVIOUS_IMAGE
              
              echo "Rollback completed"
            else
              echo "No previous image found for rollback"
              exit 1
            fi
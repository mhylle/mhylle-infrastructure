# Nginx configuration for app1
# Handles routing for frontend and backend services

# Upstream definitions for app1 services
upstream app1_frontend {
    server app1-frontend:80;
    keepalive 32;
}

upstream app1_backend {
    server app1-backend:3000;
    keepalive 32;
}

# App1 server block within the main HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name mhylle.com www.mhylle.com;
    
    # SSL certificates (inherited from main config)
    ssl_certificate /etc/nginx/ssl/mhylle.com.crt;
    ssl_certificate_key /etc/nginx/ssl/mhylle.com.key;
    
    # Frontend routes - Angular application
    location /app1 {
        # Rate limiting for web requests
        limit_req zone=web burst=20 nodelay;
        
        # Remove /app1 prefix and proxy to frontend
        rewrite ^/app1/(.*)$ /$1 break;
        rewrite ^/app1$ / break;
        
        proxy_pass http://app1_frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Handle Angular routing
        try_files $uri $uri/ @app1_fallback;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
        }
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    }
    
    # Fallback for Angular routing
    location @app1_fallback {
        rewrite ^.*$ /index.html last;
        proxy_pass http://app1_frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Backend API routes
    location /api/app1 {
        # Rate limiting for API requests
        limit_req zone=api burst=10 nodelay;
        
        # Remove /api/app1 prefix and proxy to backend
        rewrite ^/api/app1/(.*)$ /$1 break;
        rewrite ^/api/app1$ / break;
        
        proxy_pass http://app1_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # API-specific headers
        proxy_set_header Accept application/json;
        proxy_set_header Content-Type application/json;
        
        # Timeouts for API calls
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Buffer settings
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # CORS headers for API
        add_header Access-Control-Allow-Origin "https://mhylle.com" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization, X-Requested-With" always;
        add_header Access-Control-Allow-Credentials true always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "https://mhylle.com";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization, X-Requested-With";
            add_header Access-Control-Allow-Credentials true;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }
    
    # WebSocket support for app1 (if needed)
    location /ws/app1 {
        proxy_pass http://app1_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket timeouts
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
    }
    
    # Health check for app1 services
    location /health/app1 {
        access_log off;
        proxy_pass http://app1_backend/health;
        proxy_set_header Host $host;
        proxy_connect_timeout 5s;
        proxy_read_timeout 5s;
    }
}

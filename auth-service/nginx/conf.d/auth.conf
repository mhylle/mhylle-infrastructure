upstream auth_backend {
    server auth-service:3000;
}

server {
    listen 80;
    server_name localhost;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # API endpoints
    location /api/auth/ {
        # Rate limiting for login endpoint
        location = /api/auth/login {
            limit_req zone=auth_limit burst=2 nodelay;
            proxy_pass http://auth_backend/login;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # General rate limiting for other endpoints
        limit_req zone=api_limit burst=10 nodelay;
        
        # Strip /api/auth prefix and proxy to backend
        rewrite ^/api/auth/(.*)$ /$1 break;
        proxy_pass http://auth_backend;
        
        # Proxy headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 /50x.json;
    }

    # Health check endpoint (no rate limiting)
    location = /api/auth/health {
        rewrite ^/api/auth/health$ /health break;
        proxy_pass http://auth_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        access_log off;
    }

    # Error responses
    location = /50x.json {
        default_type application/json;
        return 503 '{"success":false,"error":{"code":"SERVICE_UNAVAILABLE","message":"Authentication service is temporarily unavailable"}}';
    }

    location = /404.json {
        default_type application/json;
        return 404 '{"success":false,"error":{"code":"NOT_FOUND","message":"Endpoint not found"}}';
    }
}